[{"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/App.js":"1","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/reportWebVitals.js":"2","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Home.js":"3","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Login.js":"4","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Signup.js":"5","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/index.js":"6","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Navbar.js":"7","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/CalendarPage.js":"8","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Today.js":"9","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Profile.js":"10","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/TaskDetails.js":"11","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/SelfcareDetails.js":"12","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/TaskForm.js":"13","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/SelfcareForm.js":"14","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/AddDay.js":"15","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Days.js":"16","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/DayCard.js":"17","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditDay.js":"18","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditMood.js":"19","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/DayDetails.js":"20","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditProfileForm.js":"21","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Sort.js":"22","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Search.js":"23","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Footer.js":"24"},{"size":2367,"mtime":1613602737059,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1612220947120,"results":"27","hashOfConfig":"26"},{"size":890,"mtime":1612846802628,"results":"28","hashOfConfig":"26"},{"size":2061,"mtime":1612846802629,"results":"29","hashOfConfig":"26"},{"size":3068,"mtime":1612539791937,"results":"30","hashOfConfig":"26"},{"size":542,"mtime":1612296795752,"results":"31","hashOfConfig":"26"},{"size":1295,"mtime":1612885253421,"results":"32","hashOfConfig":"26"},{"size":1885,"mtime":1612846802626,"results":"33","hashOfConfig":"26"},{"size":819,"mtime":1612983050711,"results":"34","hashOfConfig":"26"},{"size":2677,"mtime":1613601072391,"results":"35","hashOfConfig":"26"},{"size":1640,"mtime":1613491794116,"results":"36","hashOfConfig":"26"},{"size":1222,"mtime":1612491450368,"results":"37","hashOfConfig":"26"},{"size":1353,"mtime":1612812370430,"results":"38","hashOfConfig":"26"},{"size":1298,"mtime":1612505948652,"results":"39","hashOfConfig":"26"},{"size":1397,"mtime":1612971681987,"results":"40","hashOfConfig":"26"},{"size":1554,"mtime":1613512820184,"results":"41","hashOfConfig":"26"},{"size":1929,"mtime":1612998303331,"results":"42","hashOfConfig":"26"},{"size":1419,"mtime":1612906544530,"results":"43","hashOfConfig":"26"},{"size":1473,"mtime":1612906281232,"results":"44","hashOfConfig":"26"},{"size":10850,"mtime":1613492260732,"results":"45","hashOfConfig":"26"},{"size":2284,"mtime":1612553294521,"results":"46","hashOfConfig":"26"},{"size":362,"mtime":1613512784417,"results":"47","hashOfConfig":"26"},{"size":456,"mtime":1612910666474,"results":"48","hashOfConfig":"26"},{"size":187,"mtime":1613600306147,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f6p3bs",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/App.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/reportWebVitals.js",[],["106","107"],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Home.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Login.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Signup.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/index.js",[],["108","109"],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Navbar.js",["110","111"],"import { setDayWithOptions } from \"date-fns/fp\"\nimport React from \"react\"\nimport { NavLink, useHistory } from \"react-router-dom\"\n\nfunction Navbar({ currentUser, setCurrentUser, setDays }) {\n    const history = useHistory()\n\n    function handleLogout() {\n        setCurrentUser(null)\n        setDays(null)\n        history.push('/')\n    }\n\n    return (\n        <div className=\"navbar\">\n            {currentUser ?\n                <>\n                    <NavLink to=\"/calendar\" exact className=\"button\">\n                        <li>my calendar</li>\n                    </NavLink>\n                    <NavLink to=\"/today\" exact className=\"button\">\n                        <li>today</li>\n                    </NavLink>\n                    <NavLink to=\"/entries\" exact className=\"button\">\n                        <li>all entries</li>\n                    </NavLink>\n                    <NavLink to=\"/profile\" exact className=\"button\">\n                        <li>profile</li>\n                    </NavLink>\n                    <a className='button' onClick={handleLogout}>logout</a>\n                </> : \n                    <NavLink to=\"/\" exact className=\"button\">\n                    <li> remindful </li>\n                    </NavLink>\n            }\n\n        </div>\n\n    )\n}\n\nexport default Navbar\n\n","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/CalendarPage.js",["112"],"import React, { useState } from 'react';\nimport AddDay from './AddDay'\nimport Calendar from 'react-calendar';\nimport { format } from 'date-fns';\n\nfunction CalendarPage({ onAddDay, currentUser }) {\n    const [date, setDate] = useState(new Date())\n    const [showForm, setShowForm] = useState(false)\n\n    const today = format(date, 'iiii, MMMM do, yyyy')\n\n    function handleChangeDate(e) {\n        setDate(e)\n    }\n\n    function showAddDayForm() {\n        setShowForm(!showForm)\n    }\n\n    return (\n        <div className='ui raised segment'>\n\n            <a className=\"ui olive ribbon label\" id='cal-label'><i className='calendar alternate outline icon'></i>calendar</a>\n\n            <div className=\"ui small basic labeled icon button\" id='add-entry' onClick={showAddDayForm}>\n                new entry\n                <i className=\"add icon\"></i>\n            </div>\n            \n            {showForm ? <AddDay currentUser={currentUser} onAddDay={onAddDay} /> : null}\n\n            <h1 className=\"bungee-font\"> {today} </h1>\n\n            <div className='calendar-container'>\n                <Calendar\n                    value={date}\n                    onChange={handleChangeDate}\n                />\n            </div>\n\n            <div className='ui three column grid'>\n                <div className='note-one'>\n                    <div>It's a new day, let's make it count!!!</div>\n                </div>\n                <div className='note-two'>\n                    <div>Who has made my life better? Why?</div>\n                </div>\n\n                <div className='note-three'>\n                    <div>What will I let go of today?</div>\n                </div>\n\n                <div className='note-four'>\n                    <div>What is something I'm proud of this month?</div>\n                </div>\n\n            </div>\n        </div>\n\n\n\n    )\n}\n\nexport default CalendarPage;","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Today.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Profile.js",["113"],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/TaskDetails.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/SelfcareDetails.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/TaskForm.js",["114"],"\nimport React, {useState} from \"react\"\n\nfunction TaskForm({dayId, setAllTasks, day}) {\n    const [description, setDescription] = useState('')\n\n    // const dayId = tasks.filter((task) => task.day_id)\n    // console.log(dayId)\n    // console.log(dayId)\n\n    function handleSubmit(e) {\n        e.preventDefault()\n\n        const newTask = {\n            description,\n            complete: false,\n            day_id: dayId\n        }\n        // console.log(newTask)\n\n        fetch('http://localhost:3000/tasks', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(newTask),\n        })  .then(res => res.json())\n            .then(taskData => setAllTasks(taskData))\n        \n        setDescription('')\n    }\n\n    return(\n        <div className='ui form'>   \n            <form onSubmit={handleSubmit} className='fields'>\n                <div className='field'>\n                <input\n                type=\"text\"\n                placeholder=\"let's get it done!\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                />\n                </div>\n                <input className=\" ui basic button\" type=\"submit\" value=\"add\" />\n            </form>\n        </div>\n        \n    )\n}\n\nexport default TaskForm",["115","116"],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/SelfcareForm.js",["117"],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/AddDay.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Days.js",["118"],"import React, { useState } from \"react\"\nimport DayCard from './DayCard'\nimport Sort from './Sort'\nimport Search from './Search'\n\nfunction Days({ days, onDelete }) {\n    const [ASC, setASC] = useState(false)\n    const [search, setSearch] = useState('')\n\n    function handleSort() {\n        setASC(!ASC)\n    }\n\n    const sortedDays = days.map((day) => {\n        return day\n    }).sort(function (dayA, dayB) {\n        return dayB.id - dayA.id\n    })\n\n    const sortASC = sortedDays.sort(function (dayA, dayB) {\n        if (ASC) {\n            return dayA.id - dayB.id\n        } else {\n            return true\n        }\n\n    })\n\n    const searchEntry = sortASC.filter((entry) => {\n        return entry.entry.toLowerCase().includes(search.toLowerCase())\n    })\n\n    // console.log(sortedDays)\n\n    const day = searchEntry.map((day) => {\n        return (\n            <DayCard key={day.id} day={day} onDelete={onDelete} />\n        )\n    })\n\n   \n\n\n    return (\n        <div className='ui raised segment' style={{ backgroundColor: '#a5dee5' }}>\n            <a className=\"ui olive ribbon label\" id='entry-label'><i className='paperclip icon'></i>entries</a>\n            <div className='sort'>\n                <Sort ASC={ASC} handleSort={handleSort} />\n            </div>\n            <div className='sort'>sort by Jan-Dec</div>\n            <div className='search'>\n                <Search onSearch={setSearch} />\n            </div>\n            <div className='ui cards centered'>\n                {day}\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default Days","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/DayCard.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditDay.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditMood.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/DayDetails.js",["119","120","121","122","123"],"import React, { useState, useEffect } from \"react\"\nimport TaskDetails from './TaskDetails'\nimport SelfcareDetails from './SelfcareDetails'\nimport TaskForm from './TaskForm'\nimport SelfcareForm from './SelfcareForm'\nimport { useParams } from \"react-router-dom\";\nimport EditDay from './EditDay';\nimport EditMood from './EditMood';\nimport { useHistory } from \"react-router-dom\";\n\nfunction NewDay({ onHandleUpdate, days }) {\n    const [day, setDay] = useState(null);\n    const [date, setDate] = useState(null)\n    const [entry, setEntry] = useState(null)\n    const [mood, setMood] = useState(null)\n    const [water, setWater] = useState(null)\n    const [tasks, setTasks] = useState(null)\n    const [selfcare, setSelfcare] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n\n    const [isEditingEntry, setIsEditingEntry] = useState(false)\n    const [isEditingMood, setIsEditingMood] = useState(false)\n\n    const history = useHistory()\n\n\n    const params = useParams()\n\n    useEffect(() => {\n        fetch(`http://localhost:3000/days/${params.id}`)\n            .then(r => r.json())\n            .then((day) => {\n                setDay(day)\n                formatDate(day.date)\n                setEntry(day.entry)\n                setMood(day.mood)\n                setWater(day.water_intake)\n                setTasks(day.tasks)\n                setSelfcare(day.selfcares)\n                setIsLoaded(true)\n            })\n    }, [params.id])\n\n    if (!isLoaded) return <h2>Loading...</h2>;\n\n    function formatDate(date) {\n        let formattedDate = new Date(date.split('-'))\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }\n        return setDate(formattedDate.toLocaleDateString('en-US', options))\n    }\n\n    const taskItems = tasks.map((task) => {\n        return (\n            <TaskDetails key={task.id} description={task.description} status={task.complete} id={task.id} day_id={task.day_id} handleUpdate={handleUpdateTask} onDelete={handleDeleteTask} />\n        )\n    })\n\n    const selfcareItems = selfcare.map((selfcare) => {\n        return (\n            <SelfcareDetails key={selfcare.id} description={selfcare.description} status={selfcare.complete} id={selfcare.id} onDelete={handleDeleteSelfcare} />\n        )\n    })\n\n    function handleAddTask(newTask) {\n        const newTaskList = [...tasks, newTask]\n        setTasks(newTaskList)\n\n        const updatedTasks = {\n            id: day.id,\n            entry,\n            mood,\n            date: day.date,\n            water_intake: water,\n            tasks: newTaskList,\n            selfcares: selfcare\n        }\n        onHandleUpdate(updatedTasks)\n    }\n\n\n    // FUNCTION TO HANDLE TOGGLE BETWEEN COMPLETE AND NOT COMPLETE TASKS //\n\n    function handleUpdateTask(updatedTask) {\n\n        const findTask = tasks.map((task) => {\n            return task.id === updatedTask.id ? updatedTask : task\n        })\n\n        setTasks(findTask)\n\n        const updatedStatusTask = {\n            id: day.id,\n            entry,\n            mood,\n            date: day.date,\n            water_intake: water,\n            tasks: findTask,\n            selfcares: selfcare\n        }\n\n        onHandleUpdate(updatedStatusTask)\n    }\n\n    function handleSelfcare(newSelfcare) {\n        const newSelfcareList = [...selfcare, newSelfcare]\n        setSelfcare(newSelfcareList)\n    }\n\n    function handleUpdateEntry(newEntry) {\n        setEntry(newEntry)\n        setIsEditingEntry(false)\n    }\n\n    function handleUpdateMood(newMood) {\n        setMood(newMood)\n        setIsEditingMood(false)\n    }\n\n    //// WATER UPDATES ////\n\n    function handleUpdateWaterEight() {\n        const updateWater = {\n            id: day.id,\n            entry,\n            mood,\n            date: day.date,\n            water_intake: day.water_intake += 8,\n            tasks,\n            selfcares: selfcare\n        }\n        onHandleUpdate(updateWater)\n\n        fetch(`http://localhost:3000/days/${day.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updateWater)\n        })\n            .then(res => res.json())\n            .then(waterData => setWater(waterData.water_intake))\n\n    }\n\n    function handleUpdateWaterSixteen() {\n        const updateWater = {\n            id: day.id,\n            entry,\n            mood,\n            date: day.date,\n            water_intake: day.water_intake += 16,\n            tasks,\n            selfcares: selfcare\n        }\n        onHandleUpdate(updateWater)\n\n        fetch(`http://localhost:3000/days/${day.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updateWater)\n        })\n            .then(res => res.json())\n            .then(waterData => setWater(waterData.water_intake))\n\n    }\n\n    // HANDLE DELETE TASK //\n\n    function handleDeleteTask(id) {\n        const updatedTasks = tasks.filter((task) => {\n            return task.id !== id\n        })\n        setTasks(updatedTasks)\n\n        const deletedTask = {\n            id: day.id,\n            entry,\n            mood,\n            date: day.date,\n            water_intake: water,\n            tasks: updatedTasks,\n            selfcares: selfcare\n        }\n        onHandleUpdate(deletedTask)\n    }\n\n    function handleDeleteSelfcare(id) {\n        const updatedSelfcare = selfcare.filter((sc) => {\n            return sc.id !== id\n        })\n        setSelfcare(updatedSelfcare)\n    }\n\n    // HANDLE PAGINATION\n\n\n    const dayIds = days.map((day) => {\n        return (day.id)\n    })\n\n    // console.log(dayIds)\n\n\n    function handleBack() {\n       \n        const findId = day.id - 1\n\n        if (dayIds.includes(findId)) {\n            history.push(`/day/${findId}`)\n        }else {\n            alert(\"You've reached the end of your entries!\")\n        }\n\n         // for loop\n\n         // let x = day.id\n\n         // if dayId === findId, find the index from array and get the id previous or after\n        // then push to that id\n        }\n\n       \n\n    function handleNext() {\n        const findId = day.id + 1\n\n        if (dayIds.includes(findId)) {\n            history.push(`/day/${findId}`)\n        }else {\n            alert(\"You've reached the end of your entries!\")\n        }\n    }\n\n\n    return (\n        <div className='ui raised segment'>\n\n<div id='page-buttons'>\n                <button className='clear-button arrows' onClick={handleBack}><i className='chevron circle left icon'> </i>\n                </button>\n                <button className='clear-button arrows' onClick={handleNext}><i className='chevron circle right icon'> </i>\n                </button>\n            </div>\n            <div className='date-page'>\n                <h2 className='bungee-font'>{date}</h2>\n\n            </div>\n\n            \n\n\n            {/* GRATITUDE DIV */}\n            <div className='column'>\n                <div className=' ui raised segment ' style={{ backgroundColor: '#ffcfdf' }}>\n                    <a className=\"ui pink ribbon label\" id='gratitude-label'><i className='heart icon'></i>gratitude</a>\n                    <h3 className='grateful-title'>Today I'm grateful for ...</h3>\n\n                    <button className='clear-button pencil' onClick={() => setIsEditingEntry(isEditingEntry => !isEditingEntry)}>\n                        <i className=\"pencil alternate icon\" />\n                    </button>\n\n                    {isEditingEntry ? <EditDay dayEntry={entry} id={day.id} date={day.date} water={water} selfcare={selfcare} tasks={tasks} mood={mood} onUpdateEntry={handleUpdateEntry} onHandleUpdate={onHandleUpdate} /> : <div className='grateful'> {entry} </div>}\n\n                </div>\n\n                {/* TO DO DIV */}\n\n                <div className='ui two column grid'>\n                    <div className=\"column\" >\n                        <div className='ui raised segment' style={{ backgroundColor: '#fefdca' }}>\n\n                            <a className=\"ui yellow ribbon label\" id='priorities-label'><i className='bookmark icon'></i>priorities</a>\n                            <h3 className='to-do'>To Do</h3>\n                            {taskItems}\n                            <TaskForm setAllTasks={handleAddTask} dayId={day.id} />\n                        </div>\n\n                        {/* MOOD DIV */}\n\n                        <div className='ui raised segment' style={{ backgroundColor: '#a5dee5' }}>\n                            <a className=\"ui teal ribbon label\" id='mood-label'><i className='smile outline icon'></i>mood</a>\n                            <h4 className='mood-title'> How I'm feeling . . .</h4>\n\n                            <button className='clear-button pencil' onClick={() => setIsEditingMood(isEditingMood => !isEditingMood)}>\n                                <i className=\"pencil alternate icon\" />\n                            </button>\n\n                            {isEditingMood ? <EditMood dayMood={mood} id={day.id} date={day.date} water={water} selfcare={selfcare} tasks={tasks} entry={entry} onUpdateMood={handleUpdateMood} onHandleUpdate={onHandleUpdate} /> : <p className='mood'>{mood}</p>}\n\n                        </div>\n                    </div>\n\n                    <div className='column'>\n\n                        {/* WATER DIV */}\n\n                        <div className='ui raised segment'>\n                            <a className=\"ui blue right ribbon label\" id='water-label'><i className='tint icon' />daily water intake</a>\n                            <h4 className='water-title'>I drank {water} oz. of water today</h4>\n                            <div>\n                                <button className='update-water' onClick={handleUpdateWaterEight}>\n                                    <i className='tint icon' /> + 8 oz.\n                                </button>\n                                <button className='update-water' onClick={handleUpdateWaterSixteen}>\n                                    <i className='tint icon' /> + 16 oz.\n                                </button>\n                            </div>\n\n                        </div>\n                        {/* SELFCARE DIV */}\n\n                        <div className='ui raised segment' style={{ backgroundColor: '#e0f9b5' }}>\n                            <a className=\"ui olive right ribbon label\" id='mindful-label'><i className='cloud icon'></i>mindfulness  </a>\n                            <h3 className='selfcare-title'>self-care checklist</h3>\n                            {selfcareItems}\n                            <SelfcareForm dayId={day.id} setAllSelfcare={handleSelfcare} />\n\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default NewDay","/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/EditProfileForm.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Sort.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Search.js",[],"/Users/thecodeplanner/Flatiron/code/Mod5/remindful/remindful-frontend/src/Footer.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":10,"nodeType":"132","messageId":"133","endLine":1,"endColumn":27},{"ruleId":"134","severity":1,"message":"135","line":30,"column":21,"nodeType":"136","endLine":30,"endColumn":66},{"ruleId":"134","severity":1,"message":"135","line":23,"column":13,"nodeType":"136","endLine":23,"endColumn":65},{"ruleId":"134","severity":1,"message":"135","line":38,"column":13,"nodeType":"136","endLine":38,"endColumn":69},{"ruleId":"137","severity":1,"message":"138","line":21,"column":9,"nodeType":"139","messageId":"140","endLine":27,"endColumn":18,"fix":"141"},{"ruleId":"124","replacedBy":"142"},{"ruleId":"126","replacedBy":"143"},{"ruleId":"137","severity":1,"message":"138","line":17,"column":9,"nodeType":"139","messageId":"140","endLine":23,"endColumn":18,"fix":"144"},{"ruleId":"134","severity":1,"message":"135","line":46,"column":13,"nodeType":"136","endLine":46,"endColumn":67},{"ruleId":"134","severity":1,"message":"135","line":257,"column":21,"nodeType":"136","endLine":257,"endColumn":78},{"ruleId":"134","severity":1,"message":"135","line":274,"column":29,"nodeType":"136","endLine":274,"endColumn":89},{"ruleId":"134","severity":1,"message":"135","line":283,"column":29,"nodeType":"136","endLine":283,"endColumn":81},{"ruleId":"134","severity":1,"message":"135","line":300,"column":29,"nodeType":"136","endLine":300,"endColumn":88},{"ruleId":"134","severity":1,"message":"135","line":315,"column":29,"nodeType":"136","endLine":315,"endColumn":91},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],["145"],["146"],"no-unused-vars","'setDayWithOptions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-whitespace-before-property","Unexpected whitespace before property then.","MemberExpression","unexpectedWhitespace",{"range":"147","text":"148"},["145"],["146"],{"range":"149","text":"148"},"no-global-assign","no-unsafe-negation",[679,682],".",[584,587]]